//adt

class my_set:
    def init(self):  # corrected __init
        self.data = set()

    def add(self, element):
        self.data.add(element)

    def remove(self, element):
        self.data.discard(element)  # corrected to use self.data

    def contains(self, element):  # fixed typo
        return element in self.data

    def size(self):
        return len(self.data)

    def iterator(self):
        return iter(self.data)

    def intersection(self, other):
        return self.data & other.data

    def union(self, other):
        return self.data | other.data

    def diff(self, other):
        return self.data - other.data

    def subset(self, other):
        return self.data <= other.data


def menu():
    print("\n--- Set Operations Menu ---")
    print("1. Add element")
    print("2. Remove element")
    print("3. Check if element exists")
    print("4. Display set size")
    print("5. Display all elements")
    print("6. Intersection with another set")
    print("7. Union with another set")
    print("8. Difference with another set")
    print("9. Check if subset")
    print("0. Exit")


set1 = my_set()

while True:
    menu()
    choice = input("Enter your choice: ")

    if choice == '1':
        val = input("Enter element to add: ")
        set1.add(val)

    elif choice == '2':
        val = input("Enter element to remove: ")
        set1.remove(val)

    elif choice == '3':
        val = input("Enter element to check: ")
        print("Exists" if set1.contains(val) else "Not found")

    elif choice == '4':
        print("Size is:", set1.size())

    elif choice == '5':
        print("Elements are:", list(set1.iterator()))

    elif choice == '6':
        temp = my_set()
        elems = input("Enter elements for second set (space-separated): ").split()
        for e in elems:
            temp.add(e)
        print("Intersection is:", set1.intersection(temp))

    elif choice == '7':
        temp = my_set()
        elems = input("Enter elements for second set (space-separated): ").split()
        for e in elems:
            temp.add(e)
        print("Union is:", set1.union(temp))

    elif choice == '8':
        temp = my_set()
        elems = input("Enter elements for second set (space-separated): ").split()
        for e in elems:
            temp.add(e)
        print("Difference is:", set1.diff(temp))

    elif choice == '9':
        temp = my_set()
        elems = input("Enter elements for second set (space-separated): ").split()
        for e in elems:
            temp.add(e)
        print("Is Subset:", set1.subset(temp))

    elif choice == '0':
        print("Exiting.")
        break

    else:
        print("Invalid choice. Try again.")


//bfsdfs

#include <iostream>
#include <vector>
#include <stack>
#include <queue>
using namespace std;

class Graph {
    int vertices;               
    vector<int> adj[10];        

public:
    void createGraph();       
    void dfs(int start);       
    void bfs(int start);      
};


void Graph::createGraph() {
    cout << "Enter number of vertices: ";
    cin >> vertices;

    char edge;
    
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            if (i == j) continue;  
            cout << "Is there an edge between " << i << " and " << j << "? (y/n): ";
            cin >> edge;
            if (edge == 'y' || edge == 'Y') {
                adj[i].push_back(j);  
            }
        }
    }
}


void Graph::dfs(int start) {
    bool visited[10] = {false};   
    stack<int> s;
    s.push(start);               

    cout << "DFS Traversal: ";
    while (!s.empty()) {
        int node = s.top();
        s.pop();

        if (!visited[node]) {
            cout << node << " ";  
            visited[node] = true;

            
            for (int i = adj[node].size() - 1; i >= 0; i--) {
                if (!visited[adj[node][i]])
                    s.push(adj[node][i]);
            }
        }
    }
    cout << endl;
}


void Graph::bfs(int start) {
    bool visited[10] = {false};   
    queue<int> q;
    q.push(start);                

    cout << "BFS Traversal: ";
    while (!q.empty()) {
        int node = q.front();
        q.pop();

        if (!visited[node]) {
            cout << node << " ";  
            visited[node] = true;

            
            for (int v : adj[node]) {
                if (!visited[v])
                    q.push(v);
            }
        }
    }
    cout << endl;
}

int main() {
    Graph g;
    g.createGraph();             

    int start;
    cout << "Enter starting vertex for DFS: ";
    cin >> start;
    g.dfs(start);                

    cout << "Enter starting vertex for BFS: ";
    cin >> start;
    g.bfs(start);               

    return 0;
}

//book

#include <iostream>
#include <cstring>   // For strcpy
using namespace std;

/* Structure representing a node in the tree (Book, Chapter, Section, Subsection) */
struct Node {
    char label[50];          // Name or label of the node
    int count;               // Number of children
    Node* children[10];      // Array of child nodes (max 10)
};

/* Class to manage the Book Tree */
class BookTree {
private:
    Node* root;  // Root node

public:
    BookTree() {
        root = NULL;
    }

    /* Function to create the tree */
    void create() {
        root = new Node;
        cout << "Enter Book Name: ";
        cin.ignore();
        cin.getline(root->label, 50);

        cout << "Enter number of Chapters: ";
        cin >> root->count;

        for (int i = 0; i < root->count; i++) {
            root->children[i] = new Node;
            cout << "  Enter Chapter " << i + 1 << " Name: ";
            cin.ignore();
            cin.getline(root->children[i]->label, 50);

            cout << "  Enter number of Sections in Chapter: ";
            cin >> root->children[i]->count;

            for (int j = 0; j < root->children[i]->count; j++) {
                root->children[i]->children[j] = new Node;
                cout << "    Enter Section " << j + 1 << " Name: ";
                cin.ignore();
                cin.getline(root->children[i]->children[j]->label, 50);

                cout << "    Enter number of Subsections in Section: ";
                cin >> root->children[i]->children[j]->count;

                for (int k = 0; k < root->children[i]->children[j]->count; k++) {
                    root->children[i]->children[j]->children[k] = new Node;
                    cout << "      Enter Subsection " << k + 1 << " Name: ";
                    cin.ignore();
                    cin.getline(root->children[i]->children[j]->children[k]->label, 50);
                }
            }
        }
    }

    /* Function to display the tree */
    void display(Node* node) {
        if (node == NULL) {
            cout << "Tree is empty.\n";
            return;
        }

        cout << "\nBook Title: " << node->label;

        for (int i = 0; i < node->count; i++) {
            Node* chapter = node->children[i];
            cout << "\n  Chapter " << i + 1 << ": " << chapter->label;

            for (int j = 0; j < chapter->count; j++) {
                Node* section = chapter->children[j];
                cout << "\n    Section " << j + 1 << ": " << section->label;

                for (int k = 0; k < section->count; k++) {
                    Node* subsection = section->children[k];
                    cout << "\n      Subsection " << k + 1 << ": " << subsection->label;
                }
            }
        }
        cout << endl;
    }

    // Getter to return root
    Node* getRoot() {
        return root;
    }

    // Destructor to delete dynamically allocated memory
    void deleteTree(Node* node) {
        if (node == NULL)
            return;
        for (int i = 0; i < node->count; i++) {
            deleteTree(node->children[i]);
        }
        delete node;
    }

    ~BookTree() {
        deleteTree(root);
    }
};

/* Main function */
int main() {
    BookTree book;
    int choice;

    while (true) {
        cout << "\nMenu:\n1. Create Book\n2. Display Book\n3. Exit\nEnter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                book.create();
                break;
            case 2:
                book.display(book.getRoot());
                break;
            case 3:
                cout << "Exiting Program.\n";
                return 0;
            default:
                cout << "Invalid choice. Please try again.\n";
 }
}
}

//bst 
#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* left;
    Node* right;

    Node(int val) {
        data = val;
        left = right = nullptr;
    }
};

class BST {
    Node* root; 

    
    Node* insert(Node* node, int val) {
        if (!node) return new Node(val);  
        if (val < node->data)
            node->left = insert(node->left, val);  
        else
            node->right = insert(node->right, val);  
        return node;
    }

   
    void inorder(Node* node) {
        if (!node) return;
        inorder(node->left);
        cout << node->data << " ";
        inorder(node->right);
    }

    
    int height(Node* node) {
        if (!node) return 0;
        int leftH = height(node->left);
        int rightH = height(node->right);
        return 1 + max(leftH, rightH);
    }

   
    int findMin(Node* node) {
        if (!node) return -1;
        while (node->left)
            node = node->left; 
        return node->data;
    }

   
    void mirror(Node* node) {
        if (!node) return;
        mirror(node->left);
        mirror(node->right);
        swap(node->left, node->right);
    }

    
    bool search(Node* node, int val) {
        if (!node) return false;
        if (val == node->data) return true;
        if (val < node->data)
            return search(node->left, val);  
        else
            return search(node->right, val);  
    }

public:
    
    BST() {
        root = nullptr;
    }

    
    void insert(int val) {
        root = insert(root, val);
    }

    
    void displayInorder() {
        cout << "Inorder: ";
        inorder(root);
        cout << endl;
    }

    
    int getHeight() {
        return height(root);
    }

    
    int getMin() {
        return findMin(root);
    }

   
    void mirrorTree() {
        mirror(root);
    }

    
    bool find(int val) {
        return search(root, val);
    }
};


int main() {
    BST tree;
    int n, val;

    
    cout << "Enter number of values to insert: ";
    cin >> n;
    cout << "Enter values: ";
    for (int i = 0; i < n; i++) {
        cin >> val;
        tree.insert(val);
    }

    int ch;
   
    do {
        cout << "\n--- BST MENU ---\n";
        cout << "1. Insert Node\n";
        cout << "2. Inorder Display\n";
        cout << "3. Tree Height\n";
        cout << "4. Minimum Value\n";
        cout << "5. Mirror Tree\n";
        cout << "6. Search Value\n";
        cout << "7. Exit\n";
        cout << "Enter choice: ";
        cin >> ch;

        switch (ch) {
            case 1:
                cout << "Enter value to insert: ";
                cin >> val;
                tree.insert(val);
                break;
            case 2:
                tree.displayInorder();
                break;
            case 3:
                cout << "Height of tree: " << tree.getHeight() << endl;
                break;
            case 4:
                cout << "Minimum value: " << tree.getMin() << endl;
                break;
            case 5:
                tree.mirrorTree();
                cout << "Tree mirrored.\n";
                break;
            case 6:
                cout << "Enter value to search: ";
                cin >> val;
                if (tree.find(val))
                    cout << "Value found.\n";
                else
                    cout << "Value not found.\n";
                break;
            case 7:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice!\n";
        }
    } while (ch != 7);

return 0 ;
}

// floyd warshall

#include <iostream>
#include <vector>
using namespace std;

const int INF = 1e9;

int main() {
    int n, m;
    cout << "Enter number of vertices and edges: ";
    cin >> n >> m;

    vector<vector<int>> dist(n, vector<int>(n, INF));

    for (int i = 0; i < n; ++i) dist[i][i] = 0;

    cout << "Enter edges (u v w) where u and v are vertices (0-indexed) and w is weight:\n";
    for (int i = 0; i < m; ++i) {
        int u, v, w;
        cin >> u >> v >> w;
        dist[u][v] = w;
    }

    for (int k = 0; k < n; ++k)
        for (int i = 0; i < n; ++i)
            for (int j = 0; j < n; ++j)
                if (dist[i][k] + dist[k][j] < dist[i][j])
                    dist[i][j] = dist[i][k] + dist[k][j];

    cout << "\nShortest distances between every pair:\n";
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (dist[i][j] == INF) cout << "INF ";
            else cout << dist[i][j] << " ";
        }
        cout << "\n";
    }

    return 0;
}

//heap sort

import java.util.Scanner;

public class HeapSortInput {
    
    public static void heapSort(int[] a) {
        int n = a.length;

    
        for (int i = n / 2 - 1; i >= 0; i--)
            heapify(a, n, i);

        
        for (int i = n - 1; i > 0; i--) {
            int temp = a[0];
            a[0] = a[i];
            a[i] = temp;

            heapify(a, i, 0);
        }
    }

    
    static void heapify(int[] a, int n, int i) {
        int largest = i;       
        int left = 2 * i + 1;  
        int right = 2 * i + 2; 

        if (left < n && a[left] > a[largest])
            largest = left;

        if (right < n && a[right] > a[largest])
            largest = right;

        if (largest != i) {
            int temp = a[i];
            a[i] = a[largest];
            a[largest] = temp;

            heapify(a, n, largest);
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of elements: ");
        int n = sc.nextInt();

        int[] a = new int[n];

        System.out.println("Enter elements:");
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        heapSort(a);

        System.out.println("Sorted array using Heap Sort:");
        for (int i : a) {
            System.out.print(i + " ");
        }
        System.out.println();

        sc.close();
    }
}

//min spanning tree

#include <iostream>
using namespace std;

class Graph {
    int cost[20][20];  
    int visited[20];    
    int offices, lines; 

public:
    void input();      
    void display();     
    void prim();       
};


void Graph::input() {
    cout << "Enter number of offices: ";
    cin >> offices;

    
    for (int i = 0; i < offices; i++) {
        visited[i] = 0;
        for (int j = 0; j < offices; j++) {
            cost[i][j] = 999; 
        }
    }

    cout << "Enter number of connections: ";
    cin >> lines;

    for (int i = 0; i < lines; i++) {
        int from, to, wt;
        cout << "Enter connection " << i + 1 << " (office1 office2 cost): ";
        cin >> from >> to >> wt;
        cost[from - 1][to - 1] = wt;
        cost[to - 1][from - 1] = wt;
    }
}


void Graph::display() {
    cout << "\nAdjacency Matrix:\n";
    for (int i = 0; i < offices; i++) {
        for (int j = 0; j < offices; j++) {
            cout << cost[i][j] << "\t";
        }
        cout << endl;
    }
}


void Graph::prim() {
    int total = 0;
    visited[0] = 1;  

    cout << "\nMinimum cost connections:\n";

    for (int edges = 0; edges < offices - 1; edges++) {
        int min = 999, u = -1, v = -1;

        for (int i = 0; i < offices; i++) {
            if (visited[i]) {
                for (int j = 0; j < offices; j++) {
                    if (!visited[j] && cost[i][j] < min) {
                        min = cost[i][j];
                        u = i;
                        v = j;
                    }
                }
            }
        }

        visited[v] = 1;  
        total += min;
        cout << "Office " << u + 1 << " -> Office " << v + 1 << " : Cost = " << min << endl;
    }

    cout << "Total Minimum Cost: " << total << endl;
}


int main() {
    Graph g;
    int choice;

    do {
        cout << "\n======= PRIM'S ALGORITHM MENU =======\n";
        cout << "1. Input\n2. Display\n3. Find Minimum Cost\n4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: g.input(); break;
            case 2: g.display(); break;
            case 3: g.prim(); break;
            case 4: cout << "Exiting...\n"; break;
            default: cout << "Invalid choice! Try again.\n";
        }
    } while (choice != 4);

return 0;
}

//student seq 

#include <iostream>
#include <fstream>
using namespace std;


class Student {
public:
    int rollno;
    char name[50];
    char address[50];
    char division[5];

    
    void input() {
        cout << "\nEnter Roll No: ";
        cin >> rollno;
        cin.ignore(); 
        cout << "Enter Name: ";
        cin.getline(name, 50);
        cout << "Enter Address: ";
        cin.getline(address, 50);
        cout << "Enter Division: ";
        cin.getline(division, 5);
    }

   
    void display() {
        cout << "\nRoll No: " << rollno;
        cout << "\nName: " << name;
        cout << "\nAddress: " << address;
        cout << "\nDivision: " << division << "\n";
    }

    
    int getRollNo() {
        return rollno;
    }
};


void addRecord() {
    ofstream file("Student.dat", ios::binary | ios::app); 
    Student s;
    s.input(); 
    file.write((char*)&s, sizeof(s)); 
    file.close();
    cout << "\nRecord added successfully!\n";
}


void showAll() {
    ifstream file("Student.dat", ios::binary);
    Student s;
    while (file.read((char*)&s, sizeof(s))) {
        s.display();
    }
    file.close();
}


void searchRecord(int r) {
    ifstream file("Student.dat", ios::binary);
    Student s;
    bool found = false;

    while (file.read((char*)&s, sizeof(s))) {
        if (s.getRollNo() == r) {
            cout << "\nRecord Found:";
            s.display();
            found = true;
            break;
        }
    }

    if (!found)
        cout << "\nRecord not found!\n";

    file.close();
}


void deleteRecord(int r) {
    ifstream inFile("Student.dat", ios::binary);
    ofstream outFile("Temp.dat", ios::binary);
    Student s;
    bool deleted = false;

    while (inFile.read((char*)&s, sizeof(s))) {
        if (s.getRollNo() != r) {
            outFile.write((char*)&s, sizeof(s));
        } else {
            deleted = true;
        }
    }

    inFile.close();
    outFile.close();
    remove("Student.dat");
    rename("Temp.dat", "Student.dat");

    if (deleted)
        cout << "\nRecord deleted successfully!\n";
    else
        cout << "\nRecord not found!\n";
}


int main() {
    int choice, roll;

    do {
        cout << "\n==== Student Record Menu ====";
        cout << "\n1. Add Record";
        cout << "\n2. Display All Records";
        cout << "\n3. Search Record";
        cout << "\n4. Delete Record";
        cout << "\n5. Exit";
        cout << "\nEnter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                addRecord();
                break;
            case 2:
                showAll();
                break;
            case 3:
                cout << "\nEnter Roll No to search: ";
                cin >> roll;
                searchRecord(roll);
                break;
            case 4:
                cout << "\nEnter Roll No to delete: ";
                cin >> roll;
                deleteRecord(roll);
                break;
            case 5:
                cout << "\nExiting program.\n";
                break;
            default:
                cout << "\nInvalid choice. Try again!\n";
        }
    } while (choice != 5);

return 0;
}

//telephone

# Hash Table size
SIZE = 10

# Linear Probing Implementation
class LinearProbingHashTable:
    def init(self):
        self.table = [None] * SIZE

    def insert(self, name, number):
        index = hash(name) % SIZE
        while self.table[index] is not None:
            index = (index + 1) % SIZE
        self.table[index] = (name, number)

    def search(self, name):
        index = hash(name) % SIZE
        comparisons = 0
        while self.table[index] is not None:
            comparisons += 1
            if self.table[index][0] == name:
                return comparisons
            index = (index + 1) % SIZE
        return comparisons

# Chaining Implementation
class ChainingHashTable:
    def init(self):
        self.table = [[] for _ in range(SIZE)]

    def insert(self, name, number):
        index = hash(name) % SIZE
        self.table[index].append((name, number))

    def search(self, name):
        index = hash(name) % SIZE
        comparisons = 0
        for entry in self.table[index]:
            comparisons += 1
            if entry[0] == name:
                return comparisons
        return comparisons

# Sample data
clients = [("Alice", "1111"), ("Bob", "2222"), ("Charlie", "3333"),
           ("David", "4444"), ("Eve", "5555"), ("Frank", "6666")]

# Initialize tables
linear_table = LinearProbingHashTable()
chaining_table = ChainingHashTable()

# Insert clients
for name, number in clients:
    linear_table.insert(name, number)
    chaining_table.insert(name, number)

# Compare search
print("Comparisons (Name | Linear | Chaining):")
for name, _ in clients:
    l_comp = linear_table.search(name)
    c_comp = chaining_table.search(name)
    print(f"{name:<7} | {l_comp:^6} | {c_comp:^8}")
